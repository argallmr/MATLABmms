%--------------------------------------------------------------------------
% NAME
%   mms_fsm_write_ql
%
% PURPOSE
%   Write merged magnetometer data to a file.
%
% CALLING SEQUENCE:
%   mms_fsm_write_ql( FSM_QL )
%       Write merged magnetic field data to a file. Data is contained in
%       FSM_QL and is returned by mms_fsm_create_ql.m.
%
% History:
%  2014-07-19  - Written by Matthew Argall
%--------------------------------------------------------------------------
function fname_fsm = mms_fsm_write_ql( fsm_ql )
%------------------------------------%
% Create CDF File Name               %
%------------------------------------%
	% Extract for ease of use.
	sc        = fsm_ql.sc;
	instr     = fsm_ql.instr;
	mode      = fsm_ql.mode;
	level     = 'ql';
	optdesc   = '';
	tstart    = fsm_ql.tstart;

	% convert the start time to yyyy-mm-dd
	tstart = MrTimeParser(tstart, '%Y-%M-%dT%H:%m:%S', '%Y%M%d');
	                                  
	% Describe the modifications to each version
	version = 'v0.0.0';
	mods    = {  'v0.0.0 -- First version.' ...
	          };

	% Create the output filename
	fname_fsm = mms_construct_filename(sc, instr, mode, level, ...
	                                   'Directory', fsm_ql.directory, ...
	                                   'OptDesc',   optdesc, ...
	                                   'TStart',    tstart, ...
	                                   'Version',   version);

%------------------------------------------------------
% Global Attributes                                   |
%------------------------------------------------------
	if isempty(optdesc)
		data_type      = [mode '_' level];
		logical_source = [instr '_' mode '_' level];
	else
		data_type      = [mode '_' level '_' optdesc];
		logical_source = [instr '_' mode '_' level '_' optdesc];
	end
	[~, logical_file_id, ext] = fileparts(fname_fsm);
	logical_file_id = [logical_file_id ext];
	
	%   - Instrument Type (1+)
	%           Electric Fields (space)
	%           Magnetic Fields (space)
	%           Particles (space)
	%           Plasma and Solar Wind
	%           Spacecraft Potential Control
	global_attrs = struct( 'Data_type',                  data_type, ...
	                       'Data_version',               version, ...
	                       'Descriptor',                 instr, ...
	                       'Discipline',                 'Space Physics>Magnetospheric Science', ...
	                       'Generation_date',            datestr(now(), 'yyyymmdd'), ...
	                       'Instrument_type',            'Magnetic Fields (space)', ...
	                       'Logical_file_id',            logical_file_id, ...
	                       'Logical_source',             logical_source, ...
	                       'Logical_source_description', ' ', ...
	                       'Mission_group',              'MMS', ...
	                       'PI_affiliation',             'SWRI, UNH', ...
	                       'PI_name',                    'J. Burch, R. Torbert', ...
	                       'Project',                    'STP>Solar Terrestrial Physics', ...
	                       'Source_name',                'MMS#>MMS Satellite Number #', ...
	                       'TEXT',                       ['The merged magnetic field ' ...
	        'dataset is a combination of the DFG and SCM magnetometers. Merging is done in the ' ...
	        'frequency domain in the same step as data calibration. Instrument papers for DFG ' ...
	        'and SCM can be found at the following links: ' ...
	        'http://dx.doi.org/10.1007/s11214-014-0057-3 and ' ...
	        'http://dx.doi.org/10.1007/s11214-014-0096-9'], ...
	                       'HTTP_LINK',                  { {'http://mms-fields.unh.edu/' ...
	                                                        'http://mms.gsfc.nasa.gov/index.html'} }, ...
	                       'LINK_TEXT',                  { {'UNH FIELDS Home Page', ...
	                                                        'NASA MMS Home'} }, ...
	                       'MODS',                       { mods }, ...
	                       'Acknowledgements',           ' ', ...
	                       'Generated_by',               'Matthew Argall (matthew.argall@unh.edu)', ...
	                       'Parents',                    { fsm_ql.parents }, ...
	                       'Skeleton_version',           ' ', ...
	                       'Rules_of_use',               ' ', ...
	                       'Time_resolution',            ' '  ...
	                       );

%------------------------------------------------------
% Variables                                           |
%------------------------------------------------------
	% Variable naming convention
	%   scId_instrumentId_paramName_optionalDescriptor
	t_vname      = 'Epoch';
	t_fgm_vname  = 'Epoch_fg';
	b_vname      = mms_construct_varname(sc, instr, 'b', 'dmpa');
	b_fgm_vname  = mms_construct_varname(sc, instr, 'b', [instr(1:3) '_dmpa']);
	b_labl_vname = 'B_Labl_Ptr';

	% Variables
	var_list = { t_vname,      fsm_ql.tt2000,     ...
	             t_fgm_vname,  fsm_ql.tt2000_fgm, ...
	             b_vname,      fsm_ql.b_fsm_dmpa, ...
	             b_fgm_vname,  fsm_ql.b_fgm_dmpa, ...
	             b_labl_vname, {'Bx', 'By', 'Bz'} ...
	           };

	% Bounded Records
	recbound = {t_vname, t_fgm_vname, b_vname, b_fgm_vname};

	% Variable data types
	vardatatypes = { t_vname,      'cdf_time_tt2000', ...
	                 t_fgm_vname,  'cdf_time_tt2000', ...
	                 b_vname,      'cdf_float', ...
	                 b_fgm_vname,  'cdf_float', ...
	                 b_labl_vname, 'cdf_char' };

%------------------------------------------------------
% Variable Attributes                                 |
%------------------------------------------------------
	%
	% This assignment fails because the cell arrays do not have the same
	% number of elements. Adding variable attributes will have to be done
	% with cdflib.
	%
	var_attrs = struct( 'CATDESC',       {  ...
	                                       { t_vname, 'Time variable', ...
	                                         b_vname, ['Three components of ' ...
	                                                   'the magnetic field derive from a combination of ' ...
	                                                   upper(instr(1:3)) ' and SCM in the frequency domain.'], ...
	                                         b_fgm_vname, ['Three components of the ' upper(instr(1:3)) ' ' ...
	                                                       'magnetic field.'], ...
	                                         b_labl_vname, 'Axis labels for magnetic field data.' } ...
	                                     }, ...
	                    'DEPEND_0',      {  ...
	                                       { b_vname,     t_vname, ...
	                                         b_fgm_vname, t_fgm_vname ...
	                                       } ...
	                                     }, ...
	                    'DISPLAY_TYPE',  {  ... 
	                                       { b_vname,     'time_series', ...
	                                         b_fgm_vname, 'time_series' ...
	                                       } ...
	                                     }, ...
	                    'FIELDNAM',      {  ...
	                                       { t_vname,      'Time', ...
	                                         t_fgm_vname,  'Time', ...
	                                         b_vname,      'Merged Magnetic Field', ...
	                                         b_fgm_vname,  'DC Magnetic Field', ...
	                                         b_labl_vname, 'Labl_Ptr_1'} ...
	                                     }, ...
	                    'FILLVAL',       {  ...
	                                       { t_vname,      -1.0E31, ...
	                                         t_vname,      -1.0e31, ...
	                                         b_vname,      single(-1.0E31), ...
	                                         b_fgm_vname,  single(-1.0e31) ...
	                                       } ...
	                                     }, ...
	                    'FORMAT',        {  ...
	                                       { t_vname,      'I16', ...
	                                         t_fgm_vname,  'I16', ...
	                                         b_vname,      'F12.6', ...
	                                         b_fgm_vname,  'F12.6', ...
	                                         b_labl_vname, 'A2' ...
	                                       } ...
	                                     }, ...
	                    'LABLAXIS',      {  ...
	                                       { t_vname,      'UT', ...
	                                         t_fgm_vname,  'UT' ...
	                                       } ...
	                                     }, ...
	                    'LABL_PTR_1',    {  ...
	                                       { b_vname,     b_labl_vname, ...
	                                         b_fgm_vname, b_labl_vname ...
	                                       } ...
	                                     }, ...
	                    'SI_CONVERSION', {  ...
	                                       { t_vname,      '1e-9>seconds', ...
	                                         t_fgm_vname,  '1e-9>seconds', ...
	                                         b_vname,      '1e-9>Tesla', ...
	                                         b_fgm_vname,  '1e-9>Tesla' ...
	                                       } ...
	                                     }, ...
	                    'UNITS',         {  ...
	                                       { t_vname,      'ns', ...
	                                         t_fgm_vname,  'ns', ...
	                                         b_fgm_vname,  'nT', ...
	                                         b_vname,      'nT' ...
	                                       }
	                                     }, ...
	                    'VALIDMIN',      {  ...
	                                       { t_vname,      cdflib.computeEpoch([2015, 3, 1, 0, 0, 0, 0]), ...
	                                         t_fgm_vname,  cdflib.computeEpoch([2015, 3, 1, 0, 0, 0, 0]), ...
	                                         b_fgm_vname,  single(-100000.0), ...
	                                         b_vname,      single(-100000.0) ...
	                                       } ...
	                                     }, ...
	                    'VALIDMAX',      {  ...
	                                       { t_vname,      cdflib.computeEpoch([2050, 3, 1, 0, 0, 0, 0]), ...
	                                         t_fgm_vname,  cdflib.computeEpoch([2050, 3, 1, 0, 0, 0, 0]), ...
	                                         b_fgm_vname,  single(100000.0), ...
	                                         b_vname,      single(100000.0) ...
	                                       } ...
	                                     }, ...
	                    'VAR_TYPE',      {  ...
	                                       { t_vname,      'support_data', ...
	                                         t_fgm_vname,  'support_data', ...
	                                         b_fgm_vname,  'data', ...
	                                         b_vname,      'data', ...
	                                         b_labl_vname, 'metadata' ...
	                                       } ...
	                                     } ...
	                  );

%------------------------------------------------------
% Write the File                                      |
%------------------------------------------------------
	spdfcdfwrite( fname_fsm, ...
	              var_list, ...
	              'GlobalAttributes',   global_attrs, ...
	              'VariableAttributes', var_attrs,    ...
	              'VarDatatypes',       vardatatypes, ...
	              'RecordBound',        recbound      ...
	            );
	
	% If the file name is not output, print location to command window.
	if nargout == 0
		clear fname_fsm
		disp(['File written to ', fname_fsm]);
	end
end